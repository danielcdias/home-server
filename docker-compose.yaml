name: home-server
services:

  komodo-mongo:
    container_name: komodo-mongo
    hostname: komodo-mongo
    image: mongo
    labels:
      komodo.skip:
    command: --quiet --wiredTigerCacheSizeGB 0.25
    restart: unless-stopped
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    env_file:
      # CORREÇÃO: Ordem de arquivos .env ajustada para incluir o específico do Komodo
      - .env
      - config.env
      - ./komodo/compose.env
    environment:
      # As variáveis do compose.env já definem os usuários e senhas do Komodo.
      # Se elas não estiverem lá, o docker-compose usará os valores abaixo como fallback.
      MONGO_INITDB_ROOT_USERNAME: ${KOMODO_DB_USERNAME:-komodo}
      MONGO_INITDB_ROOT_PASSWORD: ${KOMODO_DB_PASSWORD:-komodo}
    networks:
      - internal_komodo
  
  komodo-core:
    container_name: komodo-core
    hostname: komodo-core
    image: ghcr.io/moghtech/komodo-core:${COMPOSE_KOMODO_IMAGE_TAG:-latest}
    labels:
      komodo.skip:
    restart: unless-stopped
    depends_on:
      - komodo-mongo
    env_file:
      # CORREÇÃO: Ordem de arquivos .env ajustada para incluir o específico do Komodo
      - .env
      - config.env
      - ./komodo/compose.env
    environment:
      KOMODO_DATABASE_ADDRESS: komodo-mongo:27017
      KOMODO_DATABASE_USERNAME: ${KOMODO_DB_USERNAME:-komodo}
      KOMODO_DATABASE_PASSWORD: ${KOMODO_DB_PASSWORD:-komodo}
    volumes:
      - ${COMPOSE_KOMODO_BACKUPS_PATH:-/etc/komodo/backups}:/backups
    networks:
      internal_komodo:
      public_web:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9120"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s      

  komodo-periphery:
    container_name: komodo-periphery
    hostname: komodo-periphery
    image: ghcr.io/moghtech/komodo-periphery:${COMPOSE_KOMODO_IMAGE_TAG:-latest}
    labels:
      komodo.skip:
    restart: unless-stopped
    env_file:
      # CORREÇÃO: Ordem de arquivos .env ajustada para incluir o específico do Komodo
      - .env
      - config.env
      - ./komodo/compose.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc:/proc
      - ${PERIPHERY_ROOT_DIRECTORY:-/etc/komodo}:${PERIPHERY_ROOT_DIRECTORY:-/etc/komodo}
    networks:
      - internal_komodo

  postgres:
    container_name: postgres
    hostname: postgres
    build:
      context: ./postgres
      dockerfile: Dockerfile
    ports:
      - "5432:5432"
    env_file:
      - .env
      - config.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal_db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  pihole:
    container_name: pihole
    hostname: pihole
    image: pihole/pihole:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    env_file:
      - .env
      - config.env
    environment:
      TZ: ${TZ:-America/Sao_Paulo}
      FTLCONF_webserver_api_password: ${PIHOLE_WEB_PASSWORD:-changeme}
      FTLCONF_dns_listeningMode: 'all'
      FTLCONF_misc_etc_dnsmasq_d: 'true'
      FTLCONF_misc_dnsmasq_lines: "address=/${SERVER_HOSTNAME}/${NGINX_IPV4}"
    volumes:
      - ./runtime_config/etc-pihole:/etc/pihole
    networks:
      public_web:
        ipv4_address: 172.20.0.20
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "dig", "+norecurse", "+retry=0", "@127.0.0.1", "pi.hole", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 15s

  homeassistant:
    container_name: homeassistant
    hostname: homeassistant
    image: ghcr.io/home-assistant/home-assistant:stable
    entrypoint: ["/bin/bash", "/docker-entrypoint.sh"]
    volumes:
      - ./home-assistant/config/configuration.yaml:/config/configuration.yaml
      - ./runtime_config/home-assistant/config:/config
      - ./home-assistant/docker-entrypoint.sh:/docker-entrypoint.sh
    env_file:
      - .env
      - config.env
    environment:
      - HA_TZ=${TZ:-America/Sao_Paulo}
    networks:
      internal_db:
      public_web:
        ipv4_address: 172.20.0.30
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8123/"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s

  nginx:
    container_name: nginx
    hostname: nginx
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/reverse-proxy.conf.tpl:/etc/nginx/templates/default.conf.tpl:ro
      - ./nginx/html:/var/www/html:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - /dev/null:/etc/nginx/conf.d/default.conf
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env
      - config.env
    command: /bin/sh -c "envsubst < /etc/nginx/templates/default.conf.tpl > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    networks:
      public_web:
        ipv4_address: 172.20.0.100
    depends_on:
      pihole:
        condition: service_healthy
      homeassistant:
        condition: service_healthy
      komodo-core:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 40s

volumes:
  mongo-data:
  mongo-config:
  postgres_data:

networks:
  internal_db:
  public_web:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  internal_komodo:
