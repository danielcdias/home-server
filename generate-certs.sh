#!/bin/bash

# Encerra o script se qualquer comando falhar
set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√µes de log
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Fun√ß√£o para mostrar uso
show_usage() {
    echo "Uso: $0 --path CAMINHO_DO_PROJETO --hostname NOME_DO_HOST --domain-suffix SUFIXO [--webmin true|false] [--ip ENDERECO_IP]"
    echo "Argumentos obrigat√≥rios:"
    echo "  --path CAMINHO_DO_PROJETO    Diret√≥rio base de instala√ß√£o (ex: /opt/homeserver)."
    echo "  --hostname NOME_DO_HOST      Nome do host (ex: homeserver)."
    echo "  --domain-suffix SUFIXO       Sufixo do dom√≠nio (ex: lan)."
    echo ""
    echo "Argumentos opcionais:"
    echo "  --webmin [true|false]        Habilitar Webmin (padr√£o: true)."
    echo "  --ip ENDERECO_IP             Endere√ßo IP da m√°quina host (ser√° detectado se n√£o fornecido)."
    echo "  --help, -h                   Mostrar esta ajuda."
    exit 1
}

# Configura√ß√µes padr√£o (apenas para fallback, ser√£o sobrescritas pelo install.sh)
DEFAULT_PROJECT_DIR="/opt/homeserver"
DEFAULT_HOSTNAME=$(hostname | cut -d'.' -f1)
if [[ -z "$DEFAULT_HOSTNAME" || "$DEFAULT_HOSTNAME" == "localhost" ]]; then
    DEFAULT_HOSTNAME="homeserver"
fi
DEFAULT_DOMAIN_SUFFIX="lan"
ENABLE_WEBMIN=true
CERT_DAYS=3650

# Fun√ß√£o para parsear argumentos
parse_arguments() {
    PROJECT_DIR="$DEFAULT_PROJECT_DIR"
    SERVER_HOSTNAME="$DEFAULT_HOSTNAME"
    DOMAIN_SUFFIX="$DEFAULT_DOMAIN_SUFFIX"
    ENABLE_WEBMIN=true
    SERVER_IP="" # Ser√° detectado ou preenchido por par√¢metro

    while [[ $# -gt 0 ]]; do
        case $1 in
            --path)
                PROJECT_DIR="$2"
                shift 2
                ;;
            --hostname)
                SERVER_HOSTNAME="$2"
                shift 2
                ;;
            --domain-suffix)
                DOMAIN_SUFFIX="$2"
                shift 2
                ;;
            --webmin)
                if [[ "$2" == "true" ]]; then
                    ENABLE_WEBMIN=true
                elif [[ "$2" == "false" ]]; then
                    ENABLE_WEBMIN=false
                fi
                shift 2
                ;;
            --ip)
                SERVER_IP="$2"
                shift 2
                ;;
            --help|-h)
                show_usage
                ;;
            *)
                log_error "Argumento desconhecido: $1"
                show_usage
                ;;
        esac
    done

    # Detecta o IP se n√£o foi fornecido via --ip
    if [[ -z "$SERVER_IP" ]]; then
        SERVER_IP=$(hostname -I | awk '{print $1}')
        if [[ -z "$SERVER_IP" ]]; then
            log_warn "N√£o foi poss√≠vel detectar o IP do host automaticamente. Usando 127.0.0.1 como fallback."
            SERVER_IP="127.0.0.1" # Fallback para evitar erro
        fi
    fi

    NGINX_SSL_DIR="$PROJECT_DIR/nginx/ssl"
    NGINX_CONF_FILE="$PROJECT_DIR/nginx/reverse-proxy.conf"

    log_info "Configura√ß√£o para Gera√ß√£o de Certificados:"
    echo -e "   - Hostname: ${BLUE}$SERVER_HOSTNAME${NC}"
    echo -e "   - Dom√≠nio: ${BLUE}$DOMAIN_SUFFIX${NC}"
    echo -e "   - Webmin: ${BLUE}$ENABLE_WEBMIN${NC}"
    echo -e "   - IP do Servidor: ${BLUE}$SERVER_IP${NC}"
    echo -e "   - Diret√≥rio do Projeto: ${BLUE}$PROJECT_DIR${NC}"
    echo -e "   - Diret√≥rio SSL do Nginx: ${BLUE}$NGINX_SSL_DIR${NC}"
    echo -e "   - Arquivo de Configura√ß√£o do Nginx: ${BLUE}$NGINX_CONF_FILE${NC}"
}

# Fun√ß√£o para extrair subdom√≠nios do nginx
extract_subdomains() {
    log_info "üîç Tentando analisar configura√ß√£o do nginx em $NGINX_CONF_FILE para subdom√≠nios..."
    
    local found_subdomains=""

    if [[ ! -f "$NGINX_CONF_FILE" ]]; then
        log_warn "Arquivo de configura√ß√£o do nginx N√ÉO ENCONTRADO em $NGINX_CONF_FILE. Subdom√≠nios ser√£o baseados apenas nos padr√µes."
        SUBDOMAINS="" # Garante que est√° vazio
        return # Sai da fun√ß√£o, n√£o √© um erro fatal
    fi
    
    log_info "Conte√∫do do 'server_name' encontrado (para depura√ß√£o):"
    grep -oP 'server_name\s+\K[^;]+' "$NGINX_CONF_FILE" | tr ' ' '\n' | sed 's/^/   /g'
    
    # Extrair todos os server_name e process√°-los
    found_subdomains=$(grep -oP 'server_name\s+\K[^;]+' "$NGINX_CONF_FILE" | \
                       tr ' ' '\n' | \
                       grep -v "^$" | \
                       grep -v "^\s*$" | \
                       sort | uniq)

    log_info "Valores brutos de 'server_name' ap√≥s grep/sort/uniq:"
    echo "$found_subdomains" | sed 's/^/   /g'

    local processed_subdomains=""
    for name in $found_subdomains; do
        # Remover o hostname base e o sufixo de dom√≠nio para isolar apenas o subdom√≠nio
        # Ex: "pihole.homeserver.lan" -> "pihole"
        # Ex: "ha.homeserver" -> "ha"
        local sub=$(echo "$name" | sed "s/\.${SERVER_HOSTNAME}\.${DOMAIN_SUFFIX}//" | sed "s/\.${SERVER_HOSTNAME}//")

        # Se o nome original continha o hostname, e o resultado n√£o √© vazio nem o hostname em si
        if [[ "$name" =~ "${SERVER_HOSTNAME}" && -n "$sub" && "$sub" != "$SERVER_HOSTNAME" ]]; then
            # Adicionar apenas se for um subdom√≠nio v√°lido e n√£o for "localhost"
            if [[ "$sub" != "localhost" && "$sub" != "$SERVER_HOSTNAME" && "$sub" != "${SERVER_HOSTNAME}.${DOMAIN_SUFFIX}" ]]; then
                 processed_subdomains+="$sub "
            fi
        fi
    done
    
    # Filtrar "webmin" se estiver desabilitado
    local final_subdomains=""
    for sub in $processed_subdomains; do
        if [[ "$sub" == "webmin" && "$ENABLE_WEBMIN" == "false" ]]; then
            log_warn "‚ö†Ô∏è  Webmin desabilitado - ignorando 'webmin' extra√≠do da configura√ß√£o."
            continue
        fi
        final_subdomains+="$sub "
    done

    SUBDOMAINS=$(echo "$final_subdomains" | xargs) # Limpa espa√ßos extras

    if [[ -z "$SUBDOMAINS" ]]; then
        log_warn "Nenhum subdom√≠nio adicional detectado na configura√ß√£o do nginx (al√©m dos padr√µes)."
    else
        log_info "‚úÖ Subdom√≠nios detectados e processados da configura√ß√£o:"
        for sub in $SUBDOMAINS; do
            echo -e "   - ${BLUE}$sub${NC}"
        done
    fi
}

# Fun√ß√£o principal
main() {
    parse_arguments "$@"
    
    log_info "üîê Iniciando gera√ß√£o de certificado √öNICO autoassinado..."
    log_info "üìÖ Validade: $((CERT_DAYS/365)) anos"
    echo ""

    # Extrair subdom√≠nios automaticamente - DEVE SER EXECUTADO PRIMEIRO PARA ATUALIZAR $SUBDOMAINS
    extract_subdomains

    # Criar lista de Subject Alternative Names (SAN)
    # Inclui o hostname base COM e SEM o sufixo .lan, localhost e o IP
    declare -a SAN_ARRAY # Usar array para evitar problemas de concatena√ß√£o de string
    SAN_ARRAY+=("DNS:$SERVER_HOSTNAME") # homeserver
    SAN_ARRAY+=("DNS:$SERVER_HOSTNAME.$DOMAIN_SUFFIX") # homeserver.lan
    SAN_ARRAY+=("DNS:localhost")
    SAN_ARRAY+=("IP:$SERVER_IP")

    # Adicionar subdom√≠nios COMUNS POR PADR√ÉO (garante que sempre estar√£o l√°)
    SAN_ARRAY+=("DNS:pihole.$SERVER_HOSTNAME")
    SAN_ARRAY+=("DNS:pihole.$SERVER_HOSTNAME.$DOMAIN_SUFFIX")
    SAN_ARRAY+=("DNS:ha.$SERVER_HOSTNAME")
    SAN_ARRAY+=("DNS:ha.$SERVER_HOSTNAME.$DOMAIN_SUFFIX")
    SAN_ARRAY+=("DNS:komodo.$SERVER_HOSTNAME")
    SAN_ARRAY+=("DNS:komodo.$SERVER_HOSTNAME.$DOMAIN_SUFFIX")

    if [[ "$ENABLE_WEBMIN" == "true" ]]; then
        SAN_ARRAY+=("DNS:webmin.$SERVER_HOSTNAME")
        SAN_ARRAY+=("DNS:webmin.$SERVER_HOSTNAME.$DOMAIN_SUFFIX")
    fi

    # Adicionar subdom√≠nios EXTRA detectados do nginx.conf (se houver)
    for sub in $SUBDOMAINS; do
        if [[ ! -z "$sub" ]]; then
            SAN_ARRAY+=("DNS:${sub}.${SERVER_HOSTNAME}.${DOMAIN_SUFFIX}")
            SAN_ARRAY+=("DNS:${sub}.${SERVER_HOSTNAME}")
        fi
    done

    # Remover duplicatas do array SAN_ARRAY (pode acontecer com a mistura de padr√µes e extra√ß√£o)
    local unique_sans=""
    for san_entry in "${SAN_ARRAY[@]}"; do
        if ! grep -q -w "$san_entry" <<< "$unique_sans"; then
            unique_sans+="$san_entry "
        fi
    done
    SAN_ARRAY=($(echo "$unique_sans" | xargs)) # Atribui de volta ao array

    # Formatar para a string final do OpenSSL
    SAN_LIST=$(IFS=,; echo "${SAN_ARRAY[*]}")
    
    log_info "üìã Subject Alternative Names configurados (final para OpenSSL):"
    echo "$SAN_LIST" | tr ',' '\n' | sed 's/^ *//' | sed 's/^/   /'

    # Criar diret√≥rio de certificados tempor√°rio para trabalhar
    TEMP_CERT_DIR=$(mktemp -d)
    log_info "üìÇ Diret√≥rio de trabalho tempor√°rio criado: $TEMP_CERT_DIR"
    cd "$TEMP_CERT_DIR"

    # --- Gerar CHAVE PRIVADA e CERTIFICADO AUTOASSINADO √öNICO ---
    log_info "üìã Gerando chave privada do servidor (homeserver.key)..."
    openssl genrsa -out homeserver.key 2048

    log_info "üìã Gerando certificado autoassinado (homeserver.crt) com todos os SANs..."

    # Criar arquivo de configura√ß√£o para SAN
    cat > openssl.cnf << EOF
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[req_distinguished_name]
CN = ${SERVER_HOSTNAME}.${DOMAIN_SUFFIX}
O = Home Server
C = BR

[v3_req]
keyUsage = keyEncipherment, dataEncipherment, digitalSignature
extendedKeyUsage = serverAuth
subjectAltName = $SAN_LIST
EOF

    # Gerar certificado autoassinado diretamente com a chave e o config
    openssl req -x509 -new -nodes -key homeserver.key -sha256 -days $CERT_DAYS -out homeserver.crt \
      -subj "/CN=${SERVER_HOSTNAME}.${DOMAIN_SUFFIX}/O=Home Server/C=BR" \
      -config openssl.cnf -extensions v3_req

    # --- Copiar homeserver.crt para ca.crt (para importa√ß√£o em clientes) ---
    log_info "Copiando homeserver.crt para ca.crt (para importa√ß√£o nos clientes)..."
    cp homeserver.crt ca.crt

    # 3. Limpar arquivos tempor√°rios do diret√≥rio de trabalho
    log_info "Limpando arquivos intermedi√°rios..."
    rm openssl.cnf

    # 4. Configurar permiss√µes nos arquivos tempor√°rios
    chmod 600 homeserver.key
    chmod 644 homeserver.crt ca.crt # ca.crt agora √© homeserver.crt

    # 5. Criar diret√≥rio SSL do nginx no local FINAL
    log_info "üìÇ Criando diret√≥rio SSL final do nginx em: $NGINX_SSL_DIR"
    mkdir -p "$NGINX_SSL_DIR"
    chmod 700 "$NGINX_SSL_DIR" 

    # 6. Copiar certificados para o nginx
    log_info "üì§ Movendo certificados para o diret√≥rio SSL final..."
    cp homeserver.crt homeserver.key "$NGINX_SSL_DIR/"
    cp ca.crt "$NGINX_SSL_DIR/"

    # 7. Ajustar permiss√µes dos arquivos copiados (agora no diret√≥rio final)
    chmod 644 "$NGINX_SSL_DIR/homeserver.crt"
    chmod 600 "$NGINX_SSL_DIR/homeserver.key"
    chmod 644 "$NGINX_SSL_DIR/ca.crt"

    # 8. Limpar o diret√≥rio de trabalho tempor√°rio
    cd - > /dev/null # Volta ao diret√≥rio anterior
    rm -r "$TEMP_CERT_DIR"
    log_info "üóëÔ∏è Diret√≥rio de trabalho tempor√°rio removido: $TEMP_CERT_DIR"

    # 9. Verificar certificado gerado
    log_info "üîç Verificando certificado gerado ($NGINX_SSL_DIR/homeserver.crt)..."
    echo -e "${GREEN}‚úÖ Dom√≠nios inclu√≠dos no certificado:${NC}"
    openssl x509 -in "$NGINX_SSL_DIR/homeserver.crt" -noout -text | grep -A1 "Subject Alternative Name" | \
        tail -1 | tr ',' '\n' | sed 's/^ *//' | sed 's/^/   /'

    # 10. Verificar datas de expira√ß√£o
    EXPIRY_DATE=$(openssl x509 -in "$NGINX_SSL_DIR/homeserver.crt" -noout -enddate | cut -d= -f2)

    echo ""
    echo -e "${GREEN}‚úÖ Certificados gerados e movidos com sucesso!${NC}"
    echo ""
    echo "üìÖ Data de expira√ß√£o do certificado: ${BLUE}$EXPIRY_DATE${NC}"
    echo ""
    echo -e "${GREEN}üìÅ Certificados finais dispon√≠veis em: ${BLUE}$NGINX_SSL_DIR/${NC}"
    echo -e "${GREEN}‚≠ê O arquivo '${BLUE}ca.crt${NC}' √© uma c√≥pia de '${BLUE}homeserver.crt${NC}' e deve ser importado em seus dispositivos clientes.${NC}"
}

main "$@"

