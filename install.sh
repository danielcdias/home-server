#!/bin/bash

# Configura√ß√µes
PROJECT_DIR="/home/daniel/home-server"
SERVICE_NAME="homeserver"
SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Fun√ß√£o para verificar se √© root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "Este script deve ser executado como root!"
        exit 1
    fi
}

# Fun√ß√£o para detectar o comando docker compose correto
detect_docker_compose() {
    # Primeiro tenta docker compose (com espa√ßo) - vers√£o mais nova
    if command -v docker > /dev/null && docker compose version > /dev/null 2>&1; then
        echo "docker compose"
    # Depois tenta docker-compose (com h√≠fen) - vers√£o mais antiga
    elif command -v docker-compose > /dev/null; then
        echo "docker-compose"
    else
        log_error "Docker Compose n√£o est√° instalado!"
        exit 1
    fi
}

# Fun√ß√£o para verificar se o diret√≥rio do projeto existe
check_project_dir() {
    if [[ ! -d "$PROJECT_DIR" ]]; then
        log_error "Diret√≥rio do projeto n√£o encontrado: $PROJECT_DIR"
        exit 1
    fi
    log_info "Diret√≥rio do projeto encontrado: $PROJECT_DIR"
}

# Fun√ß√£o para verificar se os scripts de start/stop existem
check_service_scripts() {
    if [[ ! -f "$PROJECT_DIR/start-service.sh" ]]; then
        log_error "Script de start n√£o encontrado: $PROJECT_DIR/start-service.sh"
        exit 1
    fi
    
    if [[ ! -f "$PROJECT_DIR/stop-service.sh" ]]; then
        log_error "Script de stop n√£o encontrado: $PROJECT_DIR/stop-service.sh"
        exit 1
    fi
    
    # Tornar os scripts execut√°veis
    chmod +x "$PROJECT_DIR/start-service.sh" "$PROJECT_DIR/stop-service.sh"
    log_info "Scripts de servi√ßo verificados e tornados execut√°veis"
}

# Fun√ß√£o para copiar o arquivo de servi√ßo existente
copy_service_file() {
    log_info "Verificando arquivo de servi√ßo existente..."
    
    # Verificar se o arquivo de servi√ßo j√° existe no projeto
    LOCAL_SERVICE_FILE="$PROJECT_DIR/homeserver.service"
    
    if [[ ! -f "$LOCAL_SERVICE_FILE" ]]; then
        log_error "Arquivo de servi√ßo n√£o encontrado: $LOCAL_SERVICE_FILE"
        exit 1
    fi
    
    # Copiar para o systemd
    cp "$LOCAL_SERVICE_FILE" "$SERVICE_FILE"
    
    if [[ $? -eq 0 ]]; then
        log_info "Arquivo de servi√ßo copiado: $SERVICE_FILE"
        chmod 644 "$SERVICE_FILE"
        
        # Verificar se o arquivo foi copiado corretamente
        if [[ -f "$SERVICE_FILE" ]]; then
            log_info "Conte√∫do do arquivo de servi√ßo:"
            echo "----------------------------------------"
            cat "$SERVICE_FILE"
            echo "----------------------------------------"
        fi
    else
        log_error "Falha ao copiar arquivo de servi√ßo!"
        exit 1
    fi
}

# Fun√ß√£o para configurar o servi√ßo
setup_service() {
    log_info "Configurando servi√ßo systemd..."
    
    # Recarregar systemd
    systemctl daemon-reload
    if [[ $? -ne 0 ]]; then
        log_error "Falha ao recarregar systemd!"
        exit 1
    fi
    
    # Habilitar servi√ßo
    systemctl enable "$SERVICE_NAME"
    if [[ $? -ne 0 ]]; then
        log_error "Falha ao habilitar servi√ßo!"
        exit 1
    fi
    
    log_info "Servi√ßo habilitado para inicializa√ß√£o autom√°tica"
}

# Fun√ß√£o para gerar certificados
generate_certificates() {
    log_info "Gerando certificados SSL..."
    
    # Navegar para o diret√≥rio do projeto
    cd "$PROJECT_DIR" || exit 1
    
    # Verificar se o script generate-certs.sh existe
    if [[ ! -f "generate-certs.sh" ]]; then
        log_error "Script generate-certs.sh n√£o encontrado em $PROJECT_DIR"
        exit 1
    fi
    
    # Tornar execut√°vel e executar
    chmod +x generate-certs.sh
    ./generate-certs.sh
    
    if [[ $? -eq 0 ]]; then
        log_info "Certificados gerados com sucesso!"
    else
        log_error "Falha ao gerar certificados!"
        exit 1
    fi
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    log_info "Verificando depend√™ncias..."
    
    # Verificar docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker n√£o est√° instalado!"
        exit 1
    fi
    
    # Verificar docker compose (usando a fun√ß√£o de detec√ß√£o)
    DOCKER_COMPOSE_CMD=$(detect_docker_compose)
    log_info "Comando Docker Compose detectado: $DOCKER_COMPOSE_CMD"
    
    # Verificar openssl
    if ! command -v openssl &> /dev/null; then
        log_error "OpenSSL n√£o est√° instalado!"
        exit 1
    fi
    
    log_info "Todas as depend√™ncias verificadas com sucesso"
}

# Fun√ß√£o para mostrar resumo da instala√ß√£o
show_summary() {
    echo ""
    log_info "=== INSTALA√á√ÉO CONCLU√çDA ==="
    log_info "Projeto: $PROJECT_DIR"
    log_info "Servi√ßo: $SERVICE_NAME"
    log_info "Arquivo de servi√ßo: $SERVICE_FILE"
    log_info "Script start: $PROJECT_DIR/start-service.sh"
    log_info "Script stop: $PROJECT_DIR/stop-service.sh"
    log_info "Docker Compose: $DOCKER_COMPOSE_CMD"
    echo ""
    log_info "Comandos √∫teis:"
    log_info "  Iniciar servi√ßo: systemctl start $SERVICE_NAME"
    log_info "  Parar servi√ßo: systemctl stop $SERVICE_NAME"
    log_info "  Status do servi√ßo: systemctl status $SERVICE_NAME"
    log_info "  Ver logs: journalctl -u $SERVICE_NAME -f"
    log_info "  Recarregar servi√ßo: systemctl daemon-reload"
    echo ""
    log_info "Certificados gerados em: $PROJECT_DIR/nginx/ssl/"
    log_info "Lembre-se de instalar o ca.crt em todos os dispositivos!"
    echo ""
}

# Fun√ß√£o principal
main() {
    echo -e "${GREEN}"
    echo "=========================================="
    echo "    INSTALA√á√ÉO DO HOME SERVER"
    echo "    (Usando service file existente)"
    echo "=========================================="
    echo -e "${NC}"
    
    # Verifica√ß√µes iniciais
    check_root
    check_dependencies
    check_project_dir
    check_service_scripts
    
    # Executar passos de instala√ß√£o
    copy_service_file
    setup_service
    generate_certificates
    
    # Mostrar resumo
    show_summary
    
    log_info "Instala√ß√£o conclu√≠da com sucesso! üöÄ"
    log_warn "Execute 'systemctl start $SERVICE_NAME' para iniciar os servi√ßos"
}

# Executar fun√ß√£o principal
main "$@"
